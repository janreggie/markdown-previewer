{"version":3,"sources":["Header.tsx","Markdown.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","id","className","href","icon","faGithub","defaultContent","Markdown","state","markdown","String","editorProps","this","changer","event","setState","target","value","React","Component","Editor","props","onChange","Preview","marked","require","setOptions","breaks","smartypants","content","noWrap","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","$script","get","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0TAaeA,EATA,kBACX,yBAAKC,GAAG,SAASC,UAAU,gCACzB,wBAAIA,UAAU,MAAd,sBACA,wBAAIA,UAAU,MAAK,uBAAGC,KAAK,oDACzB,kBAAC,IAAD,CAAiBC,KAAMC,MADN,c,QCFZC,EAAc,ozCAuDrBC,E,4MACJC,MAAQ,CAAEC,SAAUC,OAAOJ,I,uDAEJ,IAAD,OAChBK,EAAc,CAChBF,SAAUG,KAAKJ,MAAMC,SACrBI,QAAS,SAACC,GAAoD,EAAKC,SAAS,CAAEN,SAAUK,EAAME,OAAOC,UAGvG,OACE,yBAAKf,UAAU,YAAYD,GAAG,aAC5B,yBAAKC,UAAU,OACb,kBAAC,EAAWS,GACZ,kBAAC,EAAYC,KAAKJ,a,GAbLU,IAAMC,WAuBvBC,E,uKAEF,OACE,8BACElB,UAAU,sBACVD,GAAG,SACHgB,MAAOL,KAAKS,MAAMZ,SAClBa,SAAUV,KAAKS,MAAMR,c,GAPRK,IAAMC,WAerBI,E,kDAGJ,WAAYF,GAA8B,IAAD,8BACvC,cAAMA,IAHRG,YAEyC,EAEvC,EAAKA,OAASC,EAAQ,IACtB,EAAKD,OAAOE,WAAW,CACrBC,QAAQ,EACRC,aAAa,IALwB,E,qDAUvC,OACE,yBAAK3B,GAAG,UAAUC,UAAU,UAC1B,kBAAC,IAAD,CAAY2B,QAASjB,KAAKY,OAAOZ,KAAKS,MAAMZ,UAAWqB,QAAM,S,GAf/CZ,IAAMC,WAqBbZ,ICvGAwB,E,uKATX,OACE,yBAAK7B,UAAU,MAAMD,GAAG,OACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUiB,IAAMC,WCOlBa,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvC,QACfiC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,mBC/FjEC,EAAQC,IAAI,mEAAmE,eAE/EC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBvB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIuB,IACpBC,sBACA/B,OAAOC,SAAShC,MAEJ+D,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAM0B,sBAAN,sBAEPjC,IAgEV,SAAiCO,EAAeC,GAE9C4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQX,IAAI,gBAEnB,MAApBY,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCrC/BE,K","file":"static/js/main.b2d2e258.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nconst Header = () => (\n    <div id=\"header\" className=\"navbar navbar-light bg-light\">\n      <h1 className=\"h2\">Markdown Previewer</h1>\n      <h2 className=\"h4\"><a href=\"https://github.com/janreggie/markdown-previewer/\">\n        <FontAwesomeIcon icon={faGithub} /> GitHub</a>\n      </h2>\n    </div>\n)\n\nexport default Header\n","import React from 'react'\nimport Interweave from 'interweave'\n/**\n * defaultContent is the default content used to let the viewer know how to use the aplication.\n */\nexport const defaultContent = `# Header1\n\n## Header2\n\nEmphasis with *asterisks* or _underscores_.  \nStrong emphasis with **asterisks** or __underscores__.  \nCombined emphasis with **asterisks and _underscores_**.  \nStrikethrough uses ~~one~~ *two* tildes!  \nYou can insert code \\`in text\\` or using a code block:\n\n\\`\\`\\`go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello, playground\")\n}\n\\`\\`\\`\n\n> This is a very famous quote.\n>\n> - Gandhi\n\n1. First ordered list item\n2. Another item\n  * Unordered sub-list. \n1. Actual numbers don't matter, just that it's a number\n  1. Ordered sub-list\n4. And another item.\n  You can have properly indented paragraphs within list items.\n  Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n\n[I'm an inline-style link](https://www.google.com).\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\").\n\nURLs and URLs in angle brackets will automatically get turned into links. \nhttp://www.example.com or <http://www.example.com> and sometimes \nexample.com (but not on Github, for example).\n\nYou can also insert images on Markdown. This is me!   \n![github: janreggie](https://github.com/janreggie.png)\n`\n\n/**\n * Markdown represents the entire functional part of the application.\n * It contains an Editor and a Preview element.\n * It also stores the state which is a string representing user input.\n */\nclass Markdown extends React.Component<{}, { markdown: string }> {\n  state = { markdown: String(defaultContent) }\n\n  render(): JSX.Element {\n    let editorProps = {\n      markdown: this.state.markdown,\n      changer: (event: React.ChangeEvent<HTMLTextAreaElement>) => { this.setState({ markdown: event.target.value }) }\n    }\n\n    return (\n      <div className=\"container\" id=\"container\">\n        <div className=\"row\">\n          <Editor {...editorProps} />\n          <Preview {...this.state} />\n        </div>\n      </div>\n    )\n  }\n}\n\n/**\n * Editor is the input. Takes in props markdown (from parent) and changer, which changes parent's state.\n */\nclass Editor extends React.Component<{ markdown: string, changer: (event: React.ChangeEvent<HTMLTextAreaElement>) => void }> {\n  render(): JSX.Element {\n    return (\n      <textarea\n        className=\"form-control col-lg\"\n        id=\"editor\"\n        value={this.props.markdown}\n        onChange={this.props.changer} />\n    )\n  }\n}\n\n/**\n * Preview is the output.\n */\nclass Preview extends React.Component<{ markdown: string }> {\n  marked: any\n\n  constructor(props: { markdown: string }) {\n    super(props)\n    this.marked = require('marked')\n    this.marked.setOptions({\n      breaks: true,\n      smartypants: true,\n    })\n  }\n\n  render(): JSX.Element {\n    return (\n      <div id=\"preview\" className=\"col-lg\">\n        <Interweave content={this.marked(this.props.markdown)} noWrap />\n      </div>\n    )\n  }\n}\n\nexport default Markdown\n","import React from 'react';\nimport './App.scss';\nimport Header from './Header';\nimport Markdown from './Markdown';\n\nclass App extends React.Component<{}, { markdown: string }> {\n  render(): JSX.Element {\n    return (\n      <div className=\"App\" id=\"app\">\n        <Header />\n        <Markdown />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport $script from 'scriptjs';\n\n// Include freeCodeCamp testing suite\n$script.get('https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js', () => {});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}